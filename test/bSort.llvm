; ModuleID = "bSort.llvm"
declare i32 @printf(i8*,...)		; export the prototype of printf

declare i8* @malloc(i32)       		; the standard malloc function.
%AIPair = type { i32* , i32* }   	; a struct with two integers
@size = constant i32 10				; change size of allocated space if @size > 50

declare void @initPair(%AIPair* %p,i32 %sz)
declare void @printPair(%AIPair* %p,i32 %sz)

@msg = constant [9 x i8]  c"got: %d\0A\00"


define i32 @main() {
entry:
	%s = load i32* @size								; keep size in a global variable so it can be changed easily
	%aip.allocated = alloca %AIPair, align 8			; allocate memory for AIPair
	%a = alloca [50 x i32], align 8						; allocate memory for array A 
	%b = alloca [50 x i32], align 8						; allocate memory for array B

	%a.cast = bitcast [50 x i32]* %a to i32*			; cast array A to i32*
	%b.cast = bitcast [50 x i32]* %b to i32*			; cast array B to i32*

	%aip.pointer.a = getelementptr %AIPair* %aip.allocated, i32 0, i32 0	; get first member of AIPair structure
	%aip.pointer.b = getelementptr %AIPair* %aip.allocated, i32 0, i32 1	; get second member of AIPair structure

	store i32* %a.cast, i32** %aip.pointer.a			; store reference to array A
	store i32* %b.cast, i32** %aip.pointer.b			; store reference to array B

	call void @initPair(%AIPair* %aip.allocated, i32 %s); populate arrays

	br label %sort
sort:
	call void @printPair(%AIPair* %aip.allocated, i32 %s)	; print arrays
	call void @bubbleSort(%AIPair* %aip.allocated, i32 %s)	; call bubblesort
	br label %return
return:
	call void @printPair(%AIPair* %aip.allocated, i32 %s)	; print arrays again (should be sorted)
	ret i32 0
}

; call bubbleInner subroutine n times
define void @bubbleSort(%AIPair* %tab, i32 %n) {
entry:
	%max = sub i32 %n, 1
	br label %loop
loop:
	%count = phi i32 [0, %entry], [%i.next, %loop]
	%i.next = add i32 %count, 1
	%bubble.max = sub i32 %n, %count
	call void @bubbleInner(%AIPair* %tab, i32 %n)
	%cond = icmp ult i32 %count, %max
	br i1 %cond, label %loop, label %return
return:
	ret void
}

; iterates through the entire array once
; calls subroutine @swap for each element up until second-to-last element
define void @bubbleInner(%AIPair* %tab, i32 %n) {
entry:
	%keys.pointer = getelementptr %AIPair* %tab, i32 0, i32 0	; calculate pointer to first member of AIPair structure
	%vals.pointer = getelementptr %AIPair* %tab, i32 0, i32 1	; ditto for second member

	%keys.array.pointer = load i32** %keys.pointer				; load pointer to keys array
	%vals.array.pointer = load i32** %vals.pointer				; load pointer to vals array

	%keys = load i32* %keys.array.pointer, align 8						; load keys array
	%vals = load i32* %vals.array.pointer, align 8						; load vals array

	%num = sub i32 %n, 2										; subtract one for loop (otherwise it loops n + 1 times)

	br label %iterate

iterate:
	%count = phi i32 [0, %entry], [%i.next, %iterate]								; %n if it came from entry; otherwise, %i.next
	%i.next = add i32 %count, 1														; add 1 to count

	%element.pointer = getelementptr i32* %keys.array.pointer, i32 %count			; get pointer to element with offset %count
	%element = load i32* %element.pointer											; load the element

	call i32 @swap(i32* %keys.array.pointer, i32* %vals.array.pointer, i32 %count)	; TESTING SWAP function

	;call i32(i8*,...)* @printf(i8* bitcast ([9 x i8]* @msg to i8*),i32 %element )	; print the element

	%cond = icmp ult i32 %count, %num												; make sure count is less than %num from entry loop
	br i1 %cond, label %iterate, label %return										; branch if all elements have been iterated over

return:
	ret void
}

; checks whether elements need to be swapped
; if so, it swaps them
define i32 @swap(i32* %keys.pointer, i32* %vals.pointer, i32 %count) {
entry:
	%next.index = add i32 %count, 1
	%key.ptr.first = getelementptr i32* %keys.pointer, i32 %count					; get pointer to first key to swap
	%key.ptr.second = getelementptr i32* %keys.pointer, i32 %next.index				; get pointer to second key

	%val.ptr.first = getelementptr i32* %vals.pointer, i32 %count					; get pointer to first value
	%val.ptr.second = getelementptr i32* %vals.pointer, i32 %next.index				; get pointer to second value

	%key.first = load i32* %key.ptr.first											; load the values
	%key.second = load i32* %key.ptr.second
	%val.first = load i32* %val.ptr.first
	%val.second = load i32* %val.ptr.second

	%cond = icmp ugt i32 %key.first, %key.second									; check if first key is greater

	br i1 %cond, label %swap, label %return											; swap if so, otherwise return to caller

swap:
	store i32 %key.second, i32* %key.ptr.first
	store i32 %val.second, i32* %val.ptr.first

	store i32 %key.first, i32* %key.ptr.second
	store i32 %val.first, i32* %val.ptr.second

	br label %return
return:
	ret i32 0																		; return successfully

}